/*
 * This class is generated dynamically from Patch Rules.
 */
global class PatchRuleEngine3 extends  PatchRuleEngineBase implements IPatchRuleEngine
{
  private Id matchGroup1(PatchDataModel.MatchTarget t)
  {
    if(prematches.get('Company Name').contains('a310g000003tsbnAAA') || prematches.get('Email Domain').contains('a310g000003tsboAAA'))      return 'a300g0000019xWyAAI'; //Patch Catch All ENT Nordics - Named Accounts
    if(prematches.get('Company Name').contains('a310g000003tsbfAAA') || prematches.get('Email Domain').contains('a310g000003tsbdAAA'))      return 'a300g0000019xWgAAI'; //Patch Catch All ENT Germany - Named Accounts
    if(prematches.get('Company Name').contains('a310g000003tsagAAA') || prematches.get('Email Domain').contains('a310g000003tsafAAA'))      return 'a300g0000019xWpAAI'; //Patch Catch All ENT Mid-Atlantic - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsawAAA') || prematches.get('Email Domain').contains('a310g000003tsayAAA'))      return 'a300g0000019xWvAAI'; //Patch Catch All ENT New England - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsa5AAA') || prematches.get('Email Domain').contains('a310g000003tsa6AAA'))      return 'a300g0000019xX1AAI'; //Patch Catch All ENT NorthCentral - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsbtAAA') || prematches.get('Email Domain').contains('a310g000003tsbwAAA'))      return 'a300g0000019xXCAAY'; //Patch Catch All ENT Northeast - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsbJAAQ') || prematches.get('Email Domain').contains('a310g000003tsbIAAQ'))      return 'a300g0000019xWxAAI'; //Patch Catch All ENT NorthWest - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsabAAA') || prematches.get('Email Domain').contains('a310g000003tsaaAAA'))      return 'a300g0000019xWsAAI'; //Patch Catch All ENT Ohio Valley - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsc9AAA') || prematches.get('Email Domain').contains('a310g000003tscAAAQ'))      return 'a300g0000019xX8AAI'; //Patch Catch All ENT SouthCentral - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsbYAAQ') || prematches.get('Email Domain').contains('a310g000003tsbcAAA'))      return 'a300g0000019xXAAAY'; //Patch Catch All ENT SouthEast - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsanAAA') || prematches.get('Email Domain').contains('a310g000003tsamAAA'))      return 'a300g0000019xWfAAI'; //Patch Catch All ENT France - Named Accounts
    if(prematches.get('Company Name').contains('a310g000003tsaRAAQ') || prematches.get('Email Domain').contains('a310g000003tsaUAAQ'))      return 'a300g0000019xWqAAI'; //Patch Catch All ENT SouthWest - Patch Match List
    if(prematches.get('Company Name').contains('a310g000003tsbiAAA') || prematches.get('Email Domain').contains('a310g000003tsbhAAA'))      return 'a300g0000019xX5AAI'; //Patch Catch All ENT UK/Ireland - Patch Match List
    if(prematches.get('Company Name').contains('a310g00000JFo2IAAT') || prematches.get('Email Domain').contains('a310g00000JFo2JAAT'))      return 'a300g000002PgAxAAK'; //Patch Catch All Canada East - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2KAAT') || prematches.get('Email Domain').contains('a310g00000JFo2LAAT'))      return 'a300g000002PgAyAAK'; //Patch Catch All Canada West - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2MAAT') || prematches.get('Email Domain').contains('a310g00000JFo2NAAT'))      return 'a300g000002PgAzAAK'; //Patch Catch All Mid West ENT - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2OAAT') || prematches.get('Email Domain').contains('a310g00000JFo2PAAT'))      return 'a300g000002PgB0AAK'; //Patch Catch All Mid West LE - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2QAAT') || prematches.get('Email Domain').contains('a310g00000JFo2RAAT'))      return 'a300g000002PgB1AAK'; //Patch Catch All MidAtlantic Ent - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2SAAT') || prematches.get('Email Domain').contains('a310g00000JFo2TAAT'))      return 'a300g000002PgB2AAK'; //Patch Catch All MidAtlantic LE - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2UAAT') || prematches.get('Email Domain').contains('a310g00000JFo2VAAT'))      return 'a300g000002PgB3AAK'; //Patch Catch All MidAtlantic Major - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2WAAT') || prematches.get('Email Domain').contains('a310g00000JFo2XAAT'))      return 'a300g000002PgB4AAK'; //Patch Catch All New England ENT - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2YAAT') || prematches.get('Email Domain').contains('a310g00000JFo2ZAAT'))      return 'a300g000002PgB5AAK'; //Patch Catch All New England LE - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2aAAD') || prematches.get('Email Domain').contains('a310g00000JFo2bAAD'))      return 'a300g000002PgB6AAK'; //Patch Catch All NY/NJ Ent - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2cAAD') || prematches.get('Email Domain').contains('a310g00000JFo2dAAD'))      return 'a300g000002PgB7AAK'; //Patch Catch All NY/NJ LE - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2eAAD') || prematches.get('Email Domain').contains('a310g00000JFo2fAAD'))      return 'a300g000002PgB8AAK'; //Patch Catch All NY/NJ Major - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2gAAD') || prematches.get('Email Domain').contains('a310g00000JFo2hAAD'))      return 'a300g000002PgB9AAK'; //Patch Catch All Southeast ENT - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2iAAD') || prematches.get('Email Domain').contains('a310g00000JFo2jAAD'))      return 'a300g000002PgBAAA0'; //Patch Catch All Southeast Major - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2mAAD') || prematches.get('Email Domain').contains('a310g00000JFo2nAAD'))      return 'a300g000002PgBBAA0'; //Patch Catch All TOLA ENT - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2qAAD') || prematches.get('Email Domain').contains('a310g00000JFo2rAAD'))      return 'a300g000002PgBCAA0'; //Patch Catch All TOLA LE - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2uAAD') || prematches.get('Email Domain').contains('a310g00000JFo2vAAD'))      return 'a300g000002PgBDAA0'; //Patch Catch All West Coast ENT - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo2yAAD') || prematches.get('Email Domain').contains('a310g00000JFo2zAAD'))      return 'a300g000002PgBEAA0'; //Patch Catch All West Coast LE - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo32AAD') || prematches.get('Email Domain').contains('a310g00000JFo33AAD'))      return 'a300g000002PgBFAA0'; //Patch Catch All West Coast Major - Named Accounts
    if(prematches.get('Company Name').contains('a3170000002d34nAAA') || prematches.get('Email Domain').contains('a3170000002d34oAAA'))      return 'a3070000000TW6aAAG'; //Patch Catch All LE Canada Named Account
    if(prematches.get('Company Name').contains('a3170000002l1M7AAI') || prematches.get('Email Domain').contains('a3170000002l1MCAAY'))      return 'a3070000000TjkSAAS'; //Patch Catch All ENT Canada (DUP)
    if(prematches.get('Company Name').contains('a3170000003Cb1cAAC') || prematches.get('Email Domain').contains('a3170000003Cb1dAAC'))      return 'a3070000000EkbmAAC'; //Patch Large ENT 1 India Named Accounts
    return null;
  }
  private Id matchGroup2(PatchDataModel.MatchTarget t)
  {
    if(prematches.get('Company Name').contains('a310g00000JGHmmAAH') || prematches.get('Email Domain').contains('a310g00000JGHmrAAH'))      return 'a300g000002Qse6AAC'; //Patch Catch all - GCR - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JGHn1AAH') || prematches.get('Email Domain').contains('a310g00000JGHnBAAX'))      return 'a300g000002QseBAAS'; //Patch Catch All - CSR & TSR GCR - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMWAAZ') || prematches.get('Email Domain').contains('a310g00000DtrMXAAZ'))      return 'a300g0000022HQ3AAM'; //Patch SME GER 2 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JGXnVAAX') || prematches.get('Email Domain').contains('a310g00000JGXpRAAX'))      return 'a300g000002RZPKAA4'; //Patch TSR MEA - Named Patch
    if(prematches.get('Company Name').contains('a310g00000DtrMUAAZ') || prematches.get('Email Domain').contains('a310g00000DtrMVAAZ'))      return 'a300g0000022HQ2AAM'; //Patch SME GER 1 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMMAAZ') || prematches.get('Email Domain').contains('a310g00000DtrMNAAZ'))      return 'a300g0000022HPyAAM'; //Patch TSR Alpine 1 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMcAAJ') || prematches.get('Email Domain').contains('a310g00000DtrMdAAJ'))      return 'a300g0000022HQ6AAM'; //Patch SME UK&I 1 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMgAAJ') || prematches.get('Email Domain').contains('a310g00000DtrMhAAJ'))      return 'a300g0000022HQ8AAM'; //Patch SME UK&I 3 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMeAAJ') || prematches.get('Email Domain').contains('a310g00000DtrMfAAJ'))      return 'a300g0000022HQ7AAM'; //Patch SME UK&I 2 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMiAAJ') || prematches.get('Email Domain').contains('a310g00000DtrMjAAJ'))      return 'a300g0000022HQ9AAM'; //Patch TSR Italy 1 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMYAAZ') || prematches.get('Email Domain').contains('a310g00000DtrMZAAZ'))      return 'a300g0000022HQ4AAM'; //Patch TSR Iberia 1 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMSAAZ') || prematches.get('Email Domain').contains('a310g00000DtrMTAAZ'))      return 'a300g0000022HQ1AAM'; //Patch TSR FR 2 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMQAAZ') || prematches.get('Email Domain').contains('a310g00000DtrMRAAZ'))      return 'a300g0000022HQ0AAM'; //Patch TSR FR 1 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMOAAZ') || prematches.get('Email Domain').contains('a310g00000DtrMPAAZ'))      return 'a300g0000022HPzAAM'; //Patch TSR Benelux 1 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrMaAAJ') || prematches.get('Email Domain').contains('a310g00000DtrMbAAJ'))      return 'a300g0000022HQ5AAM'; //Patch TSR Nordics 1 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6WAAT') || prematches.get('Email Domain').contains('a310g00000JFo6XAAT'))      return 'a300g000002PgD4AAK'; //Patch TSR ANZ - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6YAAT') || prematches.get('Email Domain').contains('a310g00000JFo6ZAAT'))      return 'a300g000002PgD5AAK'; //Patch TSR ASEAN - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6aAAD') || prematches.get('Email Domain').contains('a310g00000JFo6bAAD'))      return 'a300g000002PgD6AAK'; //Patch TSR HR & Southwest - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6cAAD') || prematches.get('Email Domain').contains('a310g00000JFo6dAAD'))      return 'a300g000002PgD8AAK'; //Patch TSR India - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6eAAD') || prematches.get('Email Domain').contains('a310g00000JFo6fAAD'))      return 'a300g000002PgD9AAK'; //Patch TSR Mid-Atlantic - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6gAAD') || prematches.get('Email Domain').contains('a310g00000JFo6hAAD'))      return 'a300g000002PgDBAA0'; //Patch TSR NC & Silicon Valley - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6iAAD') || prematches.get('Email Domain').contains('a310g00000JFo6jAAD'))      return 'a300g000002PgDDAA0'; //Patch TSR New England - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6kAAD') || prematches.get('Email Domain').contains('a310g00000JFo6lAAD'))      return 'a300g000002PgDFAA0'; //Patch TSR Northeast - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6mAAD') || prematches.get('Email Domain').contains('a310g00000JFo6nAAD'))      return 'a300g000002PgDHAA0'; //Patch TSR NW & Bay Area - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6oAAD') || prematches.get('Email Domain').contains('a310g00000JFo6pAAD'))      return 'a300g000002PgDJAA0'; //Patch TSR Ohio Valley - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6qAAD') || prematches.get('Email Domain').contains('a310g00000JFo6rAAD'))      return 'a300g000002PgDLAA0'; //Patch TSR Southcentral - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFo6sAAD') || prematches.get('Email Domain').contains('a310g00000JFo6tAAD'))      return 'a300g000002PgDNAA0'; //Patch TSR Southeast - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JFoUeAAL') || prematches.get('Email Domain').contains('a310g00000JFoUjAAL'))      return 'a300g000002PgEDAA0'; //Patch TSR North Asia - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000JGUq7AAH') || prematches.get('Email Domain').contains('a310g00000JGUqHAAX'))      return 'a300g000002RZONAA4'; //Patch TSR Canada - Named Patch
    if(prematches.get('Company Name').contains('a310g00000DuFtgAAF') || prematches.get('Email Domain').contains('a310g00000DuFtvAAF'))      return 'a300g0000023yQiAAI'; //Patch GB NZ - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006NjzOAAS') || prematches.get('Email Domain').contains('a310g000006NjzTAAS'))      return 'a300g000001IBi8AAG'; //Patch GB ASEAN - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006Nk6YAAS') || prematches.get('Email Domain').contains('a310g000006Nk6dAAC'))      return 'a300g000001IBkGAAW'; //Patch GB ANZ South - GB Named Accounts
    if(prematches.get('Company Name').contains('a310g000006Nk6JAAS') || prematches.get('Email Domain').contains('a310g000006Nk6OAAS'))      return 'a300g000001IBkBAAW'; //Patch GB ANZ North - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006OlGJAA0') || prematches.get('Email Domain').contains('a310g000006OlGTAA0'))      return 'a300g000001KM5qAAG'; //Patch GB US Mid Atlantic IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006OlH2AAK') || prematches.get('Email Domain').contains('a310g000006OlH7AAK'))      return 'a300g000001KM5vAAG'; //Patch GB US New England IB - Named Accounts
    return null;
  }
  private Id matchGroup3(PatchDataModel.MatchTarget t)
  {
    if(prematches.get('Company Name').contains('a310g000006OlHMAA0') || prematches.get('Email Domain').contains('a310g000006OlHRAA0'))      return 'a300g000001KM65AAG'; //Patch GB US Ohio Valley IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006OlI5AAK') || prematches.get('Email Domain').contains('a310g000006OlIFAA0'))      return 'a300g000001KM6FAAW'; //Patch GB US Northcentral IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006OlKBAA0') || prematches.get('Email Domain').contains('a310g000006OlKLAA0'))      return 'a300g000001KM6PAAW'; //Patch GB US Northeast IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006OlN0AAK') || prematches.get('Email Domain').contains('a310g000006OlNyAAK'))      return 'a300g000001KM6UAAW'; //Patch GB US Northwest IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006OlPBAA0') || prematches.get('Email Domain').contains('a310g000006OlPGAA0'))      return 'a300g000001KM6ZAAW'; //Patch GB US Southcentral IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006OlPpAAK') || prematches.get('Email Domain').contains('a310g000006OlPuAAK'))      return 'a300g000001KM6eAAG'; //Patch GB US Southeast IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g000006OlQiAAK') || prematches.get('Email Domain').contains('a310g000006OlQnAAK'))      return 'a300g000001KM6tAAG'; //Patch GB US Southwest IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000CmaaIAAR') || prematches.get('Email Domain').contains('a310g00000CmaaSAAR'))      return 'a300g000002GL7rAAG'; //Patch GB US Heartland Rockies IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000Cmae4AAB') || prematches.get('Email Domain').contains('a310g00000CmaeJAAR'))      return 'a300g000002GL7wAAG'; //Patch GB US Pacific Northwest IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrLgAAJ') || prematches.get('Email Domain').contains('a310g00000DtrLhAAJ'))      return 'a300g0000022HPdAAM'; //Patch GB ANZ North 2 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtywoAAB') || prematches.get('Email Domain').contains('a310g00000DtywtAAB'))      return 'a300g0000022mrcAAA'; //Patch GB US FED - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrLkAAJ') || prematches.get('Email Domain').contains('a310g00000DtrLlAAJ'))      return 'a300g0000022HPfAAM'; //Patch GB Japan 2 - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000DtrLmAAJ') || prematches.get('Email Domain').contains('a310g00000DtrLnAAJ'))      return 'a300g0000022HPgAAM'; //Patch CSR North Asia - Named Accounts
    if(prematches.get('Country').contains('a3170000002l2uEAAQ') && opEqual(t.custom1, 'Large Enterprise, Major'))      return 'a3070000000TjyQAAS'; //Patch Hybrid LatAm - LE
    if(prematches.get('Country').contains('a3170000002OIWVAA4') && opEqual(t.custom1, 'Large Enterprise, Major'))      return 'a3070000000TSMfAAO'; //Patch TAIWAN, PROVINCE OF CHINA - LE
    if(opIn(t.country, new Set<String> { 'cn', 'chn', 'china' }) && opEqual(t.custom1, 'Large Enterprise, Major'))      return 'a3070000000TSByAAO'; //Patch CHINA - LE
    if(opIn(t.country, new Set<String> { 'hk', 'hkg', 'hong kong' }) && opEqual(t.custom1, 'Large Enterprise, Major'))      return 'a3070000000TSFSAA4'; //Patch HONG KONG - LE
    if(opIn(t.country, new Set<String> { 'south korea', 'kr', '\'korea', 'republic of\'', 'korea', 'republic of korea' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a3070000000FMYkAAO'; //Patch Major Korea - GEO
    if(opIn(t.country, new Set<String> { 'af', 'afghanistan', 'bhr', 'bahrain', 'egypt', 'iran', 'iran, islamic republic of', 'iraq', 'jordon', 'jordan', 'jo', 'kw', 'kuwait', 'lebanon', 'libya', 'oman', 'tunisia', 'palestine', 'palestina', 'qatar', 'saudi arabia', 'ksa', 'syria', 'dubai', 'united arab emirates', 'uae', 'yemen', 'israel', 'central african republic', 'seychelles', 'madagascar', 'congo', 'gambia', 'cameroon', 'mauritius', 'uganda', 'angola', 'malawi', 'benin', 'somalia', 'mauritania', 'burundi', 'gabon', 'mali', 'swaziland', 'togo', 'tanzania', 'liberia', 'côte d\'ivoire', 'ivory coast', 'lesotho', 'burkina faso', 'ng', 'nga', 'nigeria', 'ke', 'ken', 'kenya', 'dza', 'algeria', 'morocco', 'gh', 'ghana', 'bw', 'bwa', 'botswana', 'cv', 'cpv', 'cape verde', 'et', 'eth', 'ethiopia', 'na', 'nam', 'namibia', 'za', 'zaf', 'south africa', 'ss', 'ssd', 'south sudan', 'sd', 'sdn', 'sudan', 'zmb', 'zambia', 'zimbabwe', 'zwe', 'zwecomoros', 'comoros', 'com', 'mozambique', 'mz', 'eritrea', 'chad', 'rwanda', 'tajikistan' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g000001IBirAAG'; //Patch LE MEA - LE GEO based
    if(prematches.get('Country').contains('a3170000002l2uJAAQ') && opEqual(t.custom1, 'Enterprise'))      return 'a3070000000TjyVAAS'; //Patch Hybrid LatAm - ENT
    if(prematches.get('Country').contains('a3170000002OIWTAA4') && opEqual(t.custom1, 'Enterprise'))      return 'a3070000000TSMeAAO'; //Patch ENT GCR - GEO
    if(opIn(t.country, new Set<String> { 'cn', 'chn', 'china' }) && opEqual(t.custom1, 'Enterprise'))      return 'a3070000000TSBxAAO'; //Patch ENT GCR - GEO
    if(opIn(t.country, new Set<String> { 'hk', 'hkg', 'hong kong' }) && opEqual(t.custom1, 'Enterprise'))      return 'a3070000000TSFRAA4'; //Patch ENT GCR - GEO
    if(opIn(t.country, new Set<String> { 'nepal', 'np', 'bangladesh', 'bd', 'bhutan', 'bt' }) && opEqual(t.custom1, 'Enterprise'))      return 'a30700000019VfmAAE'; //Patch All India North - ENT (Countries)
    if(prematches.get('State').contains('a3170000003sBwtAAE') && opIn(t.country, new Set<String> { 'in', 'ind', 'india' }) && opEqual(t.custom1, 'Enterprise'))      return 'a30700000019VffAAE'; //Patch All India North - ENT (India States)
    if(opIn(t.country, new Set<String> { 'pakistan', 'pak', 'pk' }) && opEqual(t.custom1, 'Enterprise'))      return 'a30700000019VfaAAE'; //Patch All India North - ENT Pakistan
    if(opIn(t.country, new Set<String> { 'maldives', 'mv', 'sri lanka', 'srilanka', 'sri-lanka' }) && opEqual(t.custom1, 'Enterprise'))      return 'a30700000019VfpAAE'; //Patch All India South - ENT (Countries)
    if(prematches.get('State').contains('a3170000003sBwWAAU') && opIn(t.country, new Set<String> { 'in', 'ind', 'india' }) && opEqual(t.custom1, 'Enterprise'))      return 'a30700000019VfWAAU'; //Patch All India South - ENT (India States)
    if(prematches.get('State').contains('a3170000003sBwKAAU') && opIn(t.country, new Set<String> { 'in', 'ind', 'india' }) && opEqual(t.custom1, 'Enterprise'))      return 'a30700000019VfRAAU'; //Patch All India West - ENT (India States)
    if(opIn(t.country, new Set<String> { 'af', 'afghanistan', 'bhr', 'bahrain', 'egypt', 'iran', 'iraq', 'jordon', 'jordan', 'jo', 'kw', 'kuwait', 'lebanon', 'libya', 'oman', 'tunisia', 'palestine', 'palestina', 'qatar', 'saudi arabia', 'ksa', 'syria', 'dubai', 'united arab emirates', 'uae', 'yemen', 'israel', 'central african republic', 'seychelles', 'madagascar', 'congo', 'gambia', 'cameroon', 'mauritius', 'uganda', 'angola', 'malawi', 'benin', 'somalia', 'mauritania', 'burundi', 'gabon', 'mali', 'swaziland', 'togo', 'tanzania', 'liberia', 'côte d\'ivoire', 'ivory coast', 'lesotho', 'burkina faso', 'ng', 'nga', 'nigeria', 'ke', 'ken', 'kenya', 'dza', 'algeria', 'morocco', 'gh', 'ghana', 'bw', 'bwa', 'botswana', 'cv', 'cpv', 'cape verde', 'et', 'eth', 'ethiopia', 'na', 'nam', 'namibia', 'za', 'zaf', 'south africa', 'ss', 'ssd', 'south sudan', 'sd', 'sdn', 'sudan', 'zmb', 'zambia', 'zimbabwe', 'zwe', 'zwecomoros', 'comoros', 'com', 'mozambique', 'mz', 'eritrea', 'chad', 'rwanda', 'tajikistan' }) && opIn(t.custom1, new Set<String> { 'enterprise', 'terr sales', 'territory sales' }))      return 'a300g000001IBimAAG'; //Patch ENT MEA - Enterprise GEO Based
    if(opIn(t.country, new Set<String> { 'south korea', 'kr', '\'korea', 'republic of\'', 'korea', 'republic of korea' }) && opEqual(t.custom1, 'Enterprise, Large Enterprise, Major'))      return 'a3070000000FMYfAAO'; //Patch ENT Korea - GEO
    if(prematches.get('Company Name').contains('a310g000006OlDWAA0') || prematches.get('Email Domain').contains('a310g000006OlDgAAK'))      return 'a300g000001KM5MAAW'; //Patch GB LatAm IB - Named Accounts
    if(prematches.get('Company Name').contains('a310g00000Cm7QwAAJ') || prematches.get('Email Domain').contains('a310g00000Cm7R1AAJ'))      return 'a300g000002EUVlAAO'; //Patch GB US Canada IB - Named Patch
    if(opIn(t.country, new Set<String> { 'it', 'ita', 'italy', 'gr', 'grc', 'greece' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000026XYCAA2'; //Patch Catch All LE Italy - GEO Based
    if(opIn(t.country, new Set<String> { 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'andorra' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000026XYHAA2'; //Patch Catch All LE Iberia - GEO Based
    return null;
  }
  private Id matchGroup4(PatchDataModel.MatchTarget t)
  {
    if(opIn(t.country, new Set<String> { 'no', 'nor', 'norway', 'dk', 'dnk', 'denmark', 'is', 'isl', 'iceland', 'fi', 'fin', 'finland', 'se', 'swe', 'sweden', 'greenland', 'faroe islands', 'aland islands', 'åland islands' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000019xWJAAY'; //Patch Catch All LE Nordics - GEO Based
    if(opIn(t.country, new Set<String> { 'be', 'bel', 'belgium', 'nl', 'nld', 'netherlands', 'the netherlands', 'holland', 'north holland', 'lu', 'lux', 'luxembourg', 'luxemburg' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000026XXxAAM'; //Patch Catch All LE Benelux - GEO based
    if(opIn(t.country, new Set<String> { 'al', 'alb', 'albania', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ba', 'bih', 'bosnia and herzegowina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'li', 'lie', 'liechtenstein', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'pl', 'pol', 'poland', 'ro', 'rom', 'romania', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'srb', 'serbia', 'sk', 'svk', 'slovakia', 'si', 'svn', 'slovenia', 'ua', 'ukr', 'ukraine', 'tr', 'tur', 'turkey' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000019xVZAAY'; //Patch Catch All LE CEE - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000026XXiAAM'; //Patch Catch All LE Germany - GEO based
    if(opIn(t.country, new Set<String> { 'ch', 'che', 'switzerland', 'at', 'aut', 'austria' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000026XXnAAM'; //Patch Catch All LE Alpine - GEO Based
    if(opIn(t.state, new Set<String> { 'dc', 'dist of columbia', 'district of columbia', 'md', 'maryland', 'va', 'virginia', 'nc', 'north carolina', 'sc', 'south carolina', 'west virginia', 'wv' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000019xWKAAY'; //Patch Catch All LE Mid-Atlantic
    if(opIn(t.state, new Set<String> { 'vermont', 'vt', 'massachusetts', 'ma', 'maine', 'manie', 'me', 'new hampshire', 'nh', 'rhode island', 'ri', 'connecticut', 'ct' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVYAAY'; //Patch Catch All LE New England - States
    if(opZipcode(t.zipCode, '10509,10512,10516,10524,10537,10541~10542,10560,10579,10910,10912,10914~10919,10921~10922,10924~10926,10928,10930,10932~10933,10940~10941,10943,10949~10950,10953,10958~10959,10963,10969,10973~10975,10979,10981,10985,10987~10988,10990,10992,10996~10998,12007~12010,12015~12020,12022~12025,12027~12029,12031~12033,12035~12037,12040~12043,12045~12047,12050~12078,12082~12087,12089~12090,12092~12095,12106~12108,12110,12115~12118,12120~12125,12128,12130~12134,12136~12141,12143~12144,12147~12151,12153~12161,12164~12170,12172~12177,12180~12190,12192~12198,12201~12212,12220,12222~12224,12226~12250,12252,12255~12257,12260~12261,12288,12301~12309,12325,12345,12401~12402,12404~12407,12409~12414,12416~12424,12427~12436,12438~12444,12446,12448~12461,12463~12466,12468~12475,12477,12480~12487,12489~12496,12498,12501~12504,12506~12508,12510~12518,12520~12531,12533~12534,12537~12538,12540~12553,12555,12561,12563~12572,12574~12575,12577~12578,12580~12586,12588~12590,12592,12594,12601~12604,12701,12719~12727,12729,12732~12734,12736~12738,12740~12743,12745~12752,12754,12758~12760,12762~12771,12775~12781,12783~12792,12801,12803~12804,12808~12812,12814~12817,12819~12824,12827~12828,12831~12839,12841~12866,12870~12874,12878~12879,12883~12887,12901,12903,12910~12924,12926~12930,12932~12937,12939,12941~12946,12949~12950,12952~12953,12955~12962,12964~12967,12969~12970,12972~12981,12983,12985~12987,12989,12992~12993,12995~12998,13020~13022,13024,13026~13037,13039~13045,13051~13054,13056~13057,13060~13066,13068~13069,13071~13074,13076~13078,13080~13084,13087~13090,13092~13093,13101~13104,13107~13108,13110~13124,13126,13131~13132,13134~13148,13152~13160,13162~13167,13201~13212,13214~13215,13217~13221,13224~13225,13235,13244,13250~13252,13261,13290,13301~13305,13308~13310,13312~13329,13331~13335,13337~13343,13345~13346,13348,13350,13352~13355,13357,13360~13365,13367~13368,13401~13404,13406~13411,13413,13415~13418,13420~13421,13424~13426,13428,13431,13433,13435~13442,13450,13452,13454~13457,13459~13461,13464~13465,13468~13473,13475~13480,13482~13486,13488~13495,13501~13505,13599,13601~13603,13605~13608,13611~13628,13630~13643,13645~13652,13654~13656,13658~13662,13664~13685,13687,13690~13697,13699,13730~13734,13736~13740,13743~13758,13760~13763,13774~13778,13780,13782~13784,13786~13788,13790,13794~13797,13801~13804,13806~13815,13820,13825~13827,13830,13832~13835,13838~13851,13856,13859~13865,13901~13905,14001,14004~14006,14008~14013,14020~14021,14024~14043,14047~14048,14051~14052,14054~14063,14065~14070,14072,14075,14080~14083,14085~14086,14091~14092,14094~14095,14098,14101~14103,14105,14107~14113,14120,14125~14127,14129~14136,14138~14141,14143~14145,14150~14151,14166~14174,14201~14228,14231,14233,14240~14241,14260~14261,14263~14265,14267,14269~14270,14272~14273,14276,14280,14301~14305,14410~14411,14413~14416,14418,14420,14422~14425,14427~14430,14432~14433,14435,14437,14441,14443,14445,14449~14450,14452~14454,14456,14461~14464,14466~14472,14475~14482,14485~14489,14502,14504~14508,14510~14522,14525~14527,14529~14530,14532~14534,14536~14539,14541~14551,14555~14561,14563~14564,14568~14569,14571~14572,14580,14585~14586,14588~14592,14602~14627,14638~14639,14642~14647,14649~14653,14664,14673,14683,14692,14694,14701~14702,14706~14712,14714~14724,14726~14733,14735~14745,14747~14748,14750~14758,14760,14766~14767,14769~14770,14772,14774~14775,14777~14779,14781~14788,14801~14810,14812~14827,14830~14831,14836~14843,14845~14847,14850~14861,14863~14865,14867,14869~14874,14876~14887,14889,14891~14895,14897~14898,14901~14905,14925') && opIn(t.state, new Set<String> { 'new york', 'ny' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xWFAAY'; //Patch Catch All LE New England - Zip Codes
    if(opIn(t.state, new Set<String> { 'illinois', 'il', 'indiana', 'in', 'michigan', 'mi', 'kentucky', 'ky', 'tennessee', 'tn' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVKAAY'; //Patch Catch All LE NorthCentral
    if(opIn(t.state, new Set<String> { 'nj', 'pa', 'de', 'new jersey', 'philadelphia', 'delaware' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000019xVMAAY'; //Patch Catch All LE Northeast - States
    if((opZipcode(t.zipCode, '10001~10014,10016~10041,10043~10045,10047~10048,10055,10065,10069,10072,10075,10080~10082,10087,10101~10126,10128~10133,10138,10149~10179,10185,10197,10199,10213,10242,10249,10256,10259~10261,10265,10268~10282,10285~10286,10292,10301~10314,10451~10475,10499,10501~10507,10509~10511,10514,10517~10524,10526~10528,10530,10532~10533,10535~10538,10540~10541,10543,10545~10553,10557~10558,10560,10562,10566~10567,10570~10573,10576~10580,10583,10587~10591,10594~10598,10601~10607,10610,10701~10710,10801~10805,10901,10911,10913,10920,10923,10927,10931,10952,10954,10956,10960,10962,10964~10965,10968,10970,10974,10976~10977,10980,10982~10984,10986~10987,10989,10993~10994,11001~11005,11010,11020~11024,11030,11040~11042,11050~11055,11096,11101~11106,11109,11201~11226,11228~11239,11241~11243,11245,11247,11249,11251~11252,11256,11351~11352,11354~11375,11377~11381,11385~11386,11405,11411~11436,11439,11451,11499,11501,11507,11509~11510,11514,11516,11518,11520,11530~11531,11535~11536,11542,11545,11547~11561,11563,11565~11566,11568~11572,11575~11577,11579~11582,11590,11592,11594~11599,11690~11695,11697,11701~11710,11713~11722,11724~11727,11729~11733,11735~11743,11746~11747,11749~11758,11760,11762~11780,11782~11784,11786~11798,11801~11804,11815,11854~11855,11901,11930~11935,11937,11939~11942,11944,11946~11965,11967~11973,11975~11978,11980') && opIn(t.state, new Set<String> { 'new york', 'ny' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' })) || (opIn(t.state, new Set<String> { 'new york', 'ny' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' })))      return 'a300g0000019xWGAAY'; //Patch Catch All LE Northeast - Zip Codes
    if(opIn(t.state, new Set<String> { 'oregon', 'or', 'washington', 'wa', 'wyoming', 'wy', 'arizona', 'az', 'nevada', 'nv' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVLAAY'; //Patch Catch All LE NorthWest
    if(opZipcode(t.zipCode, '92328,92384,92389,93201~93202,93204,93207~93208,93210,93212,93218~93219,93221,93223,93227,93230,93232,93234~93235,93237,93239,93242,93244~93247,93256~93258,93260~93262,93265~93267,93270~93272,93274~93275,93277~93279,93282,93286,93290~93292,93426,93450,93512~93515,93517,93522,93526,93529~93530,93541~93542,93545~93546,93549,93601~93616,93618~93628,93630~93631,93633~93654,93656~93657,93660~93662,93664~93670,93673,93675,93701~93712,93714~93718,93720~93730,93740~93741,93744~93745,93747,93750,93755,93760~93761,93764~93765,93771~93780,93784,93786,93790~93794,93844,93888,93901~93902,93905~93908,93912,93915,93920~93928,93930,93932~93933,93940,93942~93944,93950,93953~93955,93960,93962,94002,94005,94010~94011,94013~94028,94030,94035,94037~94044,94060~94066,94070,94074,94080,94083,94085~94089,94096,94098,94101~94112,94114~94147,94150~94172,94175,94177,94188,94199,94203~94209,94211,94229~94230,94232,94234~94237,94239~94240,94244~94250,94252,94254,94256~94259,94261~94263,94267~94269,94271,94273~94274,94277~94280,94282~94291,94293~94299,94301~94306,94309,94401~94404,94497,94501~94503,94506~94531,94533~94553,94555~94583,94585~94592,94595~94599,94601~94615,94617~94625,94649,94659~94662,94666,94701~94710,94712,94720,94801~94808,94820,94850,94901,94903~94904,94912~94915,94920,94922~94931,94933,94937~94942,94945~94957,94960,94963~94966,94970~94979,94998~94999,95001~95015,95017~95021,95023~95024,95026,95030~95033,95035~95039,95041~95046,95050~95056,95060~95067,95070~95071,95073,95075~95077,95101,95103,95106,95108~95113,95115~95136,95138~95141,95148,95150~95161,95164,95170,95172~95173,95190~95194,95196,95201~95213,95215,95219~95234,95236~95237,95240~95242,95245~95255,95257~95258,95267,95269,95296~95297,95301,95303~95307,95309~95330,95333~95338,95340~95341,95343~95348,95350~95358,95360~95361,95363~95370,95372~95383,95385~95389,95391,95397,95401~95410,95412,95415~95433,95435~95437,95439,95441~95446,95448~95454,95456~95473,95476,95480~95482,95485~95488,95490,95492~95494,95497,95501~95503,95511,95514,95518~95519,95521,95524~95528,95531~95532,95534,95536~95538,95540,95542~95543,95545~95556,95558~95560,95562~95565,95567~95571,95573,95585,95587,95589,95595,95601~95621,95623~95642,95644~95646,95648,95650~95656,95658~95699,95701,95703,95709,95712~95715,95717,95720~95722,95724,95726,95728,95735~95736,95741~95742,95746~95747,95757~95759,95762~95763,95765,95776,95798~95799,95811~95838,95840~95843,95851~95853,95860,95864~95867,95887,95894,95899,95901,95903,95910,95912~95920,95922~95930,95932,95934~95951,95953~95963,95965~95984,95986~95988,95991~95993,96001~96003,96006~96011,96013~96017,96019~96025,96027~96029,96031~96035,96037~96041,96044,96046~96052,96054~96059,96061~96065,96067~96071,96073~96076,96078~96080,96084~96097,96099,96101,96103~96130,96132~96137,96140~96143,96145~96146,96148,96150~96152,96154~96158,96160~96162') && opIn(t.state, new Set<String> { 'california', 'ca' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000019xVQAAY'; //Patch Catch All LE NorthWest - Zip Code
    if(opIn(t.state, new Set<String> { 'pa', 'pennsylvania' }) && opIn(t.custom1, new Set<String> { 'le', 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opZipcode(t.zipCode, '15201~15244,15250~15255,15257~15265,15267~15268,15270,15272,15274~15279,15281~15283,15285~15286,15289~15290,15295'))      return 'a300g0000015RYYAA2'; //Patch Catch All LE Ohio Valley - Pittsburgh (PA State)
    if(opIn(t.state, new Set<String> { 'ohio', 'oh', 'minnesota', 'mn', 'wisconsin', 'wi', 'iowa', 'ia', 'nebraska', 'ne', 'south dakota', 'sd', 'north dakota', 'nd', 'utah', 'ut', 'colorado', 'co' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVOAAY'; //Patch Catch All LE Ohio Valley
    if(opIn(t.state, new Set<String> { 'kansas', 'ks', 'oklahoma', 'ok', 'arkansas', 'ar', 'louisiana', 'la', 'texas', 'tx' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVXAAY'; //Patch Catch All LE SouthCentral
    if(opIn(t.state, new Set<String> { 'al', 'alabama', 'fl', 'florida', 'ga', 'georgia', 'ms', 'mississippi' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVcAAI'; //Patch Catch All LE SouthEast
    if(opIn(t.country, new Set<String> { 'fr', 'fra', 'france', 'tf', 'atf', 'french southern territories', 'pf', 'pyf', 'french polynesia', 'samoa', 'gf', 'guf', 'french guiana', 'mc', 'mco', 'monaco', 'mt', 'malta' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000019xWRAAY'; //Patch Catch All LE France - GEO Based
    if(opZipcode(t.zipCode, '90001~90084,90086~90089,90091,90093~90096,90099,90101~90103,90189,90201~90202,90209~90213,90220~90224,90230~90233,90239~90242,90245,90247~90251,90254~90255,90260~90267,90270,90272,90274~90275,90277~90278,90280,90290~90296,90301~90313,90397~90398,90401~90411,90501~90510,90601~90610,90612,90620~90624,90630~90633,90637~90640,90650~90652,90659~90662,90670~90671,90680,90701~90704,90706~90707,90710~90717,90720~90721,90723,90731~90734,90740,90742~90749,90755,90801~90810,90813~90815,90822,90831~90835,90840,90842,90844~90848,90853,90888,90895,90899,91001,91003,91006~91007,91009~91012,91016~91017,91020~91021,91023~91025,91030~91031,91040~91043,91046,91066,91077,91101~91110,91114~91118,91121,91123~91126,91129,91131,91182,91184~91185,91188~91189,91191,91199,91201~91210,91214,91221~91222,91224~91226,91301~91311,91313,91316,91319~91322,91324~91331,91333~91335,91337,91340~91346,91350~91365,91367,91371~91372,91376~91377,91380~91388,91390,91392~91396,91399,91401~91413,91416,91423,91426,91436,91470,91482,91495~91497,91499,91501~91508,91510,91521~91523,91526,91601~91612,91614~91618,91701~91702,91706,91708~91711,91714~91716,91722~91724,91729~91735,91737,91739~91741,91743~91750,91752,91754~91756,91758~91759,91761~91773,91775~91776,91778,91780,91784~91786,91788~91793,91795,91797~91799,91801~91804,91841,91896,91899,91901~91903,91905~91906,91908~91917,91921,91931~91935,91941~91948,91950~91951,91962~91963,91976~91980,91987,91990,92003~92004,92007~92011,92013~92014,92018~92030,92033,92036~92040,92046,92049,92051~92052,92054~92061,92064~92072,92074~92075,92078~92079,92081~92086,92088,92090~92093,92096,92101~92124,92126~92140,92142~92143,92145,92147,92149~92150,92152~92155,92158~92179,92182,92184,92186~92187,92190~92199,92201~92203,92210~92211,92220,92222~92223,92225~92227,92230~92236,92239~92244,92247~92264,92266~92268,92270,92273~92278,92280~92286,92292,92301,92304~92305,92307~92318,92320~92327,92329,92331~92342,92344~92347,92350,92352,92354,92356~92359,92363~92366,92368~92369,92371~92378,92382,92385~92386,92391~92395,92397~92399,92401~92408,92410~92415,92418,92423~92424,92427,92501~92509,92513~92519,92521~92522,92530~92532,92536,92539,92543~92546,92548~92549,92551~92557,92561~92564,92567,92570~92572,92581~92587,92589~92593,92595~92596,92599,92602~92607,92609~92610,92612,92614~92620,92623~92630,92637,92646~92663,92672~92679,92683~92685,92688,92690~92694,92697~92698,92701~92712,92725,92728,92735,92780~92782,92799,92801~92809,92811~92812,92814~92817,92821~92823,92825,92831~92838,92840~92846,92850,92856~92857,92859~92871,92877~92883,92885~92887,92899,93001~93007,93009~93016,93020~93024,93030~93036,93040~93044,93060~93067,93093~93094,93099,93101~93103,93105~93111,93116~93118,93120~93121,93130,93140,93150,93160,93190,93199,93203,93205~93206,93215~93216,93220,93222,93224~93226,93238,93240~93241,93243,93249~93252,93254~93255,93263,93268,93276,93280,93283,93285,93287,93301~93309,93311~93314,93380~93390,93401~93403,93405~93410,93412,93420~93424,93427~93430,93432~93438,93440~93449,93451~93458,93460~93461,93463~93465,93475,93483,93501~93502,93504~93505,93510,93516,93518~93519,93523~93524,93527~93528,93531~93532,93534~93536,93539,93543~93544,93550~93556,93558,93560~93563,93581,93584,93586,93590~93592,93596,93599') && opIn(t.state, new Set<String> { 'california', 'ca' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000019xVTAAY'; //Patch Catch All LE SouthWest - Zip Code
    if(opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g000002QBwqAAG'; //Patch Catch All West Coast LE - GEO Based
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'ie', 'irl', 'ireland', 'england', 'scotland', 'bermuda', 'bm', 'republic of ireland', 'wales', 'wal', 'sct', 'cayman islands', 'northern ireland', 'nir' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a300g0000019xWNAAY'; //Patch Catch All LE UK/Ireland
    if(opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'enterprise', 'large enterprise', 'major' }) && opIn(t.state, new Set<String> { 'vic', 'victoria', 'south australia', 'sa', 'western australia', 'wa', 'melbourne', 'tasmania', 'tas' }))      return 'a3070000000TSAHAA4'; //Patch AUSTRALIA - LE - CatchAll
    if(((opIn(t.country, new Set<String> { 'au', 'aus', 'australia' }) && opIn(t.custom1, new Set<String> { 'enterprise', 'large enterprise', 'major' }) && opIn(t.state, new Set<String> { 'new south wales', 'nsw', 'queensland', 'act', 'qld', 'nt', 'northern territory', 'australian capital territory' })) || (opIn(t.custom1, new Set<String> { 'enterprise', 'large enterprise', 'major' }) && opIn(t.country, new Set<String> { 'nz', 'nzl', 'new zealand' }))))      return 'a30700000010o50AAA'; //Patch AUSTRALIA/New Zealand- ENT - CatchAll
    if(opIn(t.country, new Set<String> { 'nz', 'nzl', 'new zealand' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'major' }))      return 'a3070000000TSJCAA4'; //Patch LE - NEW ZEALAND Catch All
    if(opIn(t.country, new Set<String> { 'nz', 'nzl', 'new zealand' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000025fiAAAQ'; //Patch ENT - NEW ZEALAND Catch All
    if(opIn(t.country, new Set<String> { 'bangladesh', 'bd', 'bhutan', 'bt', 'india', 'maldives', 'mv', 'nepal', 'np', 'pakistan', 'pk', 'sri lanka', 'lk' }) && opIn(t.custom1, new Set<String> { 'large enterprise', 'enterprise', 'major' }))      return 'a3070000000Ezm0AAC'; //Patch SAARC - LE/ENT
    if(opIn(t.country, new Set<String> { 'no', 'nor', 'norway', 'dk', 'dnk', 'denmark', 'is', 'isl', 'iceland', 'fi', 'fin', 'finland', 'se', 'swe', 'sweden', 'greenland', 'faroe islands', 'aland islands', 'åland islands' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000019xWPAAY'; //Patch Catch All ENT Nordics - GEO Based
    if(opIn(t.country, new Set<String> { 'be', 'bel', 'belgium', 'nl', 'nld', 'netherlands', 'the netherlands', 'holland', 'north holland', 'lu', 'lux', 'luxembourg', 'luxemburg' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000026XY7AAM'; //Patch Catch All ENT Benelux - GEO Based
    if(opIn(t.country, new Set<String> { 'al', 'alb', 'albania', 'am', 'arm', 'armenia', 'az', 'aze', 'azerbaijan', 'by', 'blr', 'belarus', 'ba', 'bih', 'bosnia and herzegowina', 'bg', 'bgr', 'bulgaria', 'hr', 'hrv', 'croatia', 'hrvatska', 'cz', 'cze', 'czech republic', 'ee', 'est', 'estonia', 'ge', 'geo', 'georgia', 'hu', 'hun', 'hungary', 'kz', 'kaz', 'kazakhstan', 'lv', 'lva', 'latvia', 'li', 'lie', 'liechtenstein', 'lt', 'ltu', 'lithuania', 'mk', 'mkd', 'macedonia', 'pl', 'pol', 'poland', 'ro', 'rom', 'romania', 'ru', 'rus', 'russian federation', 'russia', 'rs', 'srb', 'serbia', 'sk', 'svk', 'slovakia', 'si', 'svn', 'slovenia', 'ua', 'ukr', 'ukraine', 'tr', 'tur', 'turkey' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000019xWMAAY'; //Patch Catch All ENT CEE - GEO Based
    if(opIn(t.country, new Set<String> { 'de', 'deu', 'germany', 'deutschland' }) && opIn(t.custom1, new Set<String> { 'enterprise', 'terr sales', 'territory sales' }))      return 'a300g0000026XXsAAM'; //Patch Catch All ENT Germany - GEO based
    if(opIn(t.country, new Set<String> { 'ch', 'che', 'switzerland', 'at', 'aut', 'austria' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000026XY2AAM'; //Patch Catch All ENT Alpine - GEO Based
    if(opIn(t.state, new Set<String> { 'dc', 'dist of columbia', 'district of columbia', 'md', 'maryland', 'va', 'virginia', 'nc', 'north carolina', 'sc', 'south carolina', 'west virginia', 'wv' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000019xWLAAY'; //Patch Catch All ENT Mid-Atlantic
    if(opIn(t.state, new Set<String> { 'vt', 'ma', 'me', 'nh', 'ri', 'ct', 'vermont', 'massachusetts', 'maine', 'new hampshire', 'rhode island', 'connecticut' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVWAAY'; //Patch Catch All ENT New England
    if(opZipcode(t.zipCode, '10509,10512,10516,10524,10537,10541~10542,10560,10579,10910,10912,10914~10919,10921~10922,10924~10926,10928,10930,10932~10933,10940~10941,10943,10949~10950,10953,10958~10959,10963,10969,10973~10975,10979,10981,10985,10987~10988,10990,10992,10996~10998,12007~12010,12015~12020,12022~12025,12027~12029,12031~12033,12035~12037,12040~12043,12045~12047,12050~12078,12082~12087,12089~12090,12092~12095,12106~12108,12110,12115~12118,12120~12125,12128,12130~12134,12136~12141,12143~12144,12147~12151,12153~12161,12164~12170,12172~12177,12180~12190,12192~12198,12201~12212,12220,12222~12224,12226~12250,12252,12255~12257,12260~12261,12288,12301~12309,12325,12345,12401~12402,12404~12407,12409~12414,12416~12424,12427~12436,12438~12444,12446,12448~12461,12463~12466,12468~12475,12477,12480~12487,12489~12496,12498,12501~12504,12506~12508,12510~12518,12520~12531,12533~12534,12537~12538,12540~12553,12555,12561,12563~12572,12574~12575,12577~12578,12580~12586,12588~12590,12592,12594,12601~12604,12701,12719~12727,12729,12732~12734,12736~12738,12740~12743,12745~12752,12754,12758~12760,12762~12771,12775~12781,12783~12792,12801,12803~12804,12808~12812,12814~12817,12819~12824,12827~12828,12831~12839,12841~12866,12870~12874,12878~12879,12883~12887,12901,12903,12910~12924,12926~12930,12932~12937,12939,12941~12946,12949~12950,12952~12953,12955~12962,12964~12967,12969~12970,12972~12981,12983,12985~12987,12989,12992~12993,12995~12998,13020~13022,13024,13026~13037,13039~13045,13051~13054,13056~13057,13060~13066,13068~13069,13071~13074,13076~13078,13080~13084,13087~13090,13092~13093,13101~13104,13107~13108,13110~13124,13126,13131~13132,13134~13148,13152~13160,13162~13167,13201~13212,13214~13215,13217~13221,13224~13225,13235,13244,13250~13252,13261,13290,13301~13305,13308~13310,13312~13329,13331~13335,13337~13343,13345~13346,13348,13350,13352~13355,13357,13360~13365,13367~13368,13401~13404,13406~13411,13413,13415~13418,13420~13421,13424~13426,13428,13431,13433,13435~13442,13450,13452,13454~13457,13459~13461,13464~13465,13468~13473,13475~13480,13482~13486,13488~13495,13501~13505,13599,13601~13603,13605~13608,13611~13628,13630~13643,13645~13652,13654~13656,13658~13662,13664~13685,13687,13690~13697,13699,13730~13734,13736~13740,13743~13758,13760~13763,13774~13778,13780,13782~13784,13786~13788,13790,13794~13797,13801~13804,13806~13815,13820,13825~13827,13830,13832~13835,13838~13851,13856,13859~13865,13901~13905,14001,14004~14006,14008~14013,14020~14021,14024~14043,14047~14048,14051~14052,14054~14063,14065~14070,14072,14075,14080~14083,14085~14086,14091~14092,14094~14095,14098,14101~14103,14105,14107~14113,14120,14125~14127,14129~14136,14138~14141,14143~14145,14150~14151,14166~14174,14201~14228,14231,14233,14240~14241,14260~14261,14263~14265,14267,14269~14270,14272~14273,14276,14280,14301~14305,14410~14411,14413~14416,14418,14420,14422~14425,14427~14430,14432~14433,14435,14437,14441,14443,14445,14449~14450,14452~14454,14456,14461~14464,14466~14472,14475~14482,14485~14489,14502,14504~14508,14510~14522,14525~14527,14529~14530,14532~14534,14536~14539,14541~14551,14555~14561,14563~14564,14568~14569,14571~14572,14580,14585~14586,14588~14592,14602~14627,14638~14639,14642~14647,14649~14653,14664,14673,14683,14692,14694,14701~14702,14706~14712,14714~14724,14726~14733,14735~14745,14747~14748,14750~14758,14760,14766~14767,14769~14770,14772,14774~14775,14777~14779,14781~14788,14801~14810,14812~14827,14830~14831,14836~14843,14845~14847,14850~14861,14863~14865,14867,14869~14874,14876~14887,14889,14891~14895,14897~14898,14901~14905,14925') && opIn(t.state, new Set<String> { 'new york', 'ny' }) && opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xWwAAI'; //Patch Catch All ENT New England - Zip Codes
    if(opIn(t.state, new Set<String> { 'illinois', 'il', 'indiana', 'in', 'michigan', 'mi', 'kentucky', 'ky', 'tennessee', 'tn' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVNAAY'; //Patch Catch All ENT NorthCentral
    return null;
  }
  private Id matchGroup5(PatchDataModel.MatchTarget t)
  {
    if((opZipcode(t.zipCode, '10001~10014,10016~10041,10043~10045,10047~10048,10055,10065,10069,10072,10075,10080~10082,10087,10101~10126,10128~10133,10138,10149~10179,10185,10197,10199,10213,10242,10249,10256,10259~10261,10265,10268~10282,10285~10286,10292,10301~10314,10451~10475,10499,10501~10507,10509~10511,10514,10517~10524,10526~10528,10530,10532~10533,10535~10538,10540~10541,10543,10545~10553,10557~10558,10560,10562,10566~10567,10570~10573,10576~10580,10583,10587~10591,10594~10598,10601~10607,10610,10701~10710,10801~10805,10901,10911,10913,10920,10923,10927,10931,10952,10954,10956,10960,10962,10964~10965,10968,10970,10974,10976~10977,10980,10982~10984,10986~10987,10989,10993~10994,11001~11005,11010,11020~11024,11030,11040~11042,11050~11055,11096,11101~11106,11109,11201~11226,11228~11239,11241~11243,11245,11247,11249,11251~11252,11256,11351~11352,11354~11375,11377~11381,11385~11386,11405,11411~11436,11439,11451,11499,11501,11507,11509~11510,11514,11516,11518,11520,11530~11531,11535~11536,11542,11545,11547~11561,11563,11565~11566,11568~11572,11575~11577,11579~11582,11590,11592,11594~11599,11690~11695,11697,11701~11710,11713~11722,11724~11727,11729~11733,11735~11743,11746~11747,11749~11758,11760,11762~11780,11782~11784,11786~11798,11801~11804,11815,11854~11855,11901,11930~11935,11937,11939~11942,11944,11946~11965,11967~11973,11975~11978,11980') && opIn(t.state, new Set<String> { 'new york', 'ny' }) && opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' })) || (opIn(t.state, new Set<String> { 'new york', 'ny' }) && opIn(t.custom1, new Set<String> { 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' })))      return 'a300g0000019xWoAAI'; //Patch Catch All ENT Northeast - Zip Code
    if(opIn(t.state, new Set<String> { 'hawaii', 'hi', 'alaska', 'ak', 'idaho', 'id', 'montana', 'mt', 'new mexico', 'nm', 'oregon', 'or', 'washington', 'wa', 'wyoming', 'wy', 'arizona', 'az', 'nevada', 'nv' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVaAAI'; //Patch Catch All ENT NorthWest
    if(opZipcode(t.zipCode, '92328,92384,92389,93201~93202,93204,93207~93208,93210,93212,93218~93219,93221,93223,93227,93230,93232,93234~93235,93237,93239,93242,93244~93247,93256~93258,93260~93262,93265~93267,93270~93272,93274~93275,93277~93279,93282,93286,93290~93292,93426,93450,93512~93515,93517,93522,93526,93529~93530,93541~93542,93545~93546,93549,93601~93616,93618~93628,93630~93631,93633~93654,93656~93657,93660~93662,93664~93670,93673,93675,93701~93712,93714~93718,93720~93730,93740~93741,93744~93745,93747,93750,93755,93760~93761,93764~93765,93771~93780,93784,93786,93790~93794,93844,93888,93901~93902,93905~93908,93912,93915,93920~93928,93930,93932~93933,93940,93942~93944,93950,93953~93955,93960,93962,94002,94005,94010~94011,94013~94028,94030,94035,94037~94044,94060~94066,94070,94074,94080,94083,94085~94089,94096,94098,94101~94112,94114~94147,94150~94172,94175,94177,94188,94199,94203~94209,94211,94229~94230,94232,94234~94237,94239~94240,94244~94250,94252,94254,94256~94259,94261~94263,94267~94269,94271,94273~94274,94277~94280,94282~94291,94293~94299,94301~94306,94309,94401~94404,94497,94501~94503,94506~94531,94533~94553,94555~94583,94585~94592,94595~94599,94601~94615,94617~94625,94649,94659~94662,94666,94701~94710,94712,94720,94801~94808,94820,94850,94901,94903~94904,94912~94915,94920,94922~94931,94933,94937~94942,94945~94957,94960,94963~94966,94970~94979,94998~94999,95001~95015,95017~95021,95023~95024,95026,95030~95033,95035~95039,95041~95046,95050~95056,95060~95067,95070~95071,95073,95075~95077,95101,95103,95106,95108~95113,95115~95136,95138~95141,95148,95150~95161,95164,95170,95172~95173,95190~95194,95196,95201~95213,95215,95219~95234,95236~95237,95240~95242,95245~95255,95257~95258,95267,95269,95296~95297,95301,95303~95307,95309~95330,95333~95338,95340~95341,95343~95348,95350~95358,95360~95361,95363~95370,95372~95383,95385~95389,95391,95397,95401~95410,95412,95415~95433,95435~95437,95439,95441~95446,95448~95454,95456~95473,95476,95480~95482,95485~95488,95490,95492~95494,95497,95501~95503,95511,95514,95518~95519,95521,95524~95528,95531~95532,95534,95536~95538,95540,95542~95543,95545~95556,95558~95560,95562~95565,95567~95571,95573,95585,95587,95589,95595,95601~95621,95623~95642,95644~95646,95648,95650~95656,95658~95699,95701,95703,95709,95712~95715,95717,95720~95722,95724,95726,95728,95735~95736,95741~95742,95746~95747,95757~95759,95762~95763,95765,95776,95798~95799,95811~95838,95840~95843,95851~95853,95860,95864~95867,95887,95894,95899,95901,95903,95910,95912~95920,95922~95930,95932,95934~95951,95953~95963,95965~95984,95986~95988,95991~95993,96001~96003,96006~96011,96013~96017,96019~96025,96027~96029,96031~96035,96037~96041,96044,96046~96052,96054~96059,96061~96065,96067~96071,96073~96076,96078~96080,96084~96097,96099,96101,96103~96130,96132~96137,96140~96143,96145~96146,96148,96150~96152,96154~96158,96160~96162') && opIn(t.state, new Set<String> { 'ca', 'california' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }))      return 'a300g0000019xVPAAY'; //Patch Catch All ENT NorthWest - Norcal Zip Codes
    if(opIn(t.state, new Set<String> { 'ohio', 'oh', 'minnesota', 'mn', 'wisconsin', 'wi', 'iowa', 'ia', 'nebraska', 'ne', 'south dakota', 'sd', 'north dakota', 'nd', 'utah', 'ut', 'colorado', 'co' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVSAAY'; //Patch Catch All ENT Ohio Valley
    if(opIn(t.state, new Set<String> { 'pa', 'pennsylvania' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opZipcode(t.zipCode, '15201~15244,15250~15255,15257~15265,15267~15268,15270,15272,15274~15279,15281~15283,15285~15286,15289~15290,15295'))      return 'a300g0000015RYTAA2'; //Patch Catch All ENT Ohio Valley - Pittsburgh (PA State)
    if(opIn(t.state, new Set<String> { 'kansas', 'ks', 'oklahoma', 'ok', 'arkansas', 'ar', 'louisiana', 'la', 'texas', 'tx' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g0000019xVJAAY'; //Patch Catch All ENT SouthCentral
    if(opIn(t.state, new Set<String> { 'al', 'alabama', 'fl', 'florida', 'ga', 'georgia', 'ms', 'mississippi' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }))      return 'a300g0000019xVdAAI'; //Patch Catch All ENT SouthEast
    if(opIn(t.country, new Set<String> { 'fr', 'fra', 'france', 'tf', 'atf', 'french southern territories', 'pf', 'pyf', 'french polynesia', 'samoa', 'gf', 'guf', 'french guiana', 'mc', 'mco', 'monaco', 'mt', 'malta' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000019xWQAAY'; //Patch Catch All ENT France - GEO Based
    if(opIn(t.country, new Set<String> { 'it', 'ita', 'italy', 'gr', 'grc', 'greece' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000026XYMAA2'; //Patch Catch All ENT Italy - GEO Based
    if(opIn(t.country, new Set<String> { 'es', 'esp', 'spain', 'pt', 'prt', 'portugal', 'andorra' }) && opIn(t.custom1, new Set<String> { 'enterprise' }))      return 'a300g0000026XYRAA2'; //Patch Catch All ENT Iberia - GEO Based
    if(opZipcode(t.zipCode, '90001~90084,90086~90089,90091,90093~90096,90099,90101~90103,90189,90201~90202,90209~90213,90220~90224,90230~90233,90239~90242,90245,90247~90251,90254~90255,90260~90267,90270,90272,90274~90275,90277~90278,90280,90290~90296,90301~90313,90397~90398,90401~90411,90501~90510,90601~90610,90612,90620~90624,90630~90633,90637~90640,90650~90652,90659~90662,90670~90671,90680,90701~90704,90706~90707,90710~90717,90720~90721,90723,90731~90734,90740,90742~90749,90755,90801~90810,90813~90815,90822,90831~90835,90840,90842,90844~90848,90853,90888,90895,90899,91001,91003,91006~91007,91009~91012,91016~91017,91020~91021,91023~91025,91030~91031,91040~91043,91046,91066,91077,91101~91110,91114~91118,91121,91123~91126,91129,91131,91182,91184~91185,91188~91189,91191,91199,91201~91210,91214,91221~91222,91224~91226,91301~91311,91313,91316,91319~91322,91324~91331,91333~91335,91337,91340~91346,91350~91365,91367,91371~91372,91376~91377,91380~91388,91390,91392~91396,91399,91401~91413,91416,91423,91426,91436,91470,91482,91495~91497,91499,91501~91508,91510,91521~91523,91526,91601~91612,91614~91618,91701~91702,91706,91708~91711,91714~91716,91722~91724,91729~91735,91737,91739~91741,91743~91750,91752,91754~91756,91758~91759,91761~91773,91775~91776,91778,91780,91784~91786,91788~91793,91795,91797~91799,91801~91804,91841,91896,91899,91901~91903,91905~91906,91908~91917,91921,91931~91935,91941~91948,91950~91951,91962~91963,91976~91980,91987,91990,92003~92004,92007~92011,92013~92014,92018~92030,92033,92036~92040,92046,92049,92051~92052,92054~92061,92064~92072,92074~92075,92078~92079,92081~92086,92088,92090~92093,92096,92101~92124,92126~92140,92142~92143,92145,92147,92149~92150,92152~92155,92158~92179,92182,92184,92186~92187,92190~92199,92201~92203,92210~92211,92220,92222~92223,92225~92227,92230~92236,92239~92244,92247~92264,92266~92268,92270,92273~92278,92280~92286,92292,92301,92304~92305,92307~92318,92320~92327,92329,92331~92342,92344~92347,92350,92352,92354,92356~92359,92363~92366,92368~92369,92371~92378,92382,92385~92386,92391~92395,92397~92399,92401~92408,92410~92415,92418,92423~92424,92427,92501~92509,92513~92519,92521~92522,92530~92532,92536,92539,92543~92546,92548~92549,92551~92557,92561~92564,92567,92570~92572,92581~92587,92589~92593,92595~92596,92599,92602~92607,92609~92610,92612,92614~92620,92623~92630,92637,92646~92663,92672~92679,92683~92685,92688,92690~92694,92697~92698,92701~92712,92725,92728,92735,92780~92782,92799,92801~92809,92811~92812,92814~92817,92821~92823,92825,92831~92838,92840~92846,92850,92856~92857,92859~92871,92877~92883,92885~92887,92899,93001~93007,93009~93016,93020~93024,93030~93036,93040~93044,93060~93067,93093~93094,93099,93101~93103,93105~93111,93116~93118,93120~93121,93130,93140,93150,93160,93190,93199,93203,93205~93206,93215~93216,93220,93222,93224~93226,93238,93240~93241,93243,93249~93252,93254~93255,93263,93268,93276,93280,93283,93285,93287,93301~93309,93311~93314,93380~93390,93401~93403,93405~93410,93412,93420~93424,93427~93430,93432~93438,93440~93449,93451~93458,93460~93461,93463~93465,93475,93483,93501~93502,93504~93505,93510,93516,93518~93519,93523~93524,93527~93528,93531~93532,93534~93536,93539,93543~93544,93550~93556,93558,93560~93563,93581,93584,93586,93590~93592,93596,93599') && opIn(t.state, new Set<String> { 'ca', 'california' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }))      return 'a300g0000019xVVAAY'; //Patch Catch All ENT SouthWest - Socal Zip Code
    if(opIn(t.country, new Set<String> { 'gb', 'gbr', 'united kingdom', 'uk', 'great britain', 'ie', 'irl', 'ireland', 'england', 'scotland', 'bermuda', 'bm', 'republic of ireland', 'wales', 'wal', 'sct', 'cayman islands', 'northern ireland', 'nir' }) && opIn(t.custom1, new Set<String> { 'enterprise', 'terr sales', 'territory sales' }))      return 'a300g0000019xWOAAY'; //Patch Catch All ENT UK/Ireland
    if(((opIn(t.state, new Set<String> { 'co', 'colorado', 'mt', 'montana', 'nd', 'north dakota', 'sd', 'south dakota', 'ut', 'utah', 'wy', 'wyoming', 'az', 'arizona', 'nv', 'nevada', 'nm', 'new mexico' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' })) || (opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opZipcode(t.zipCode, '90001~90084,90086~90089,90091,90093~90096,90099,90101~90103,90189,90201~90202,90209~90213,90220~90224,90230~90233,90239~90242,90245,90247~90251,90254~90255,90260~90267,90270,90272,90274~90275,90277~90278,90280,90290~90296,90301~90313,90397~90398,90401~90411,90501~90510,90601~90610,90612,90620~90624,90630~90633,90637~90640,90650~90652,90659~90662,90670~90671,90680,90701~90704,90706~90707,90710~90717,90720~90721,90723,90731~90734,90740,90742~90749,90755,90801~90810,90813~90815,90822,90831~90835,90840,90842,90844~90848,90853,90888,90895,90899,91001,91003,91006~91007,91009~91012,91016~91017,91020~91021,91023~91025,91030~91031,91040~91043,91046,91066,91077,91101~91110,91114~91118,91121,91123~91126,91129,91131,91182,91184~91185,91188~91189,91191,91199,91201~91210,91214,91221~91222,91224~91226,91301~91311,91313,91316,91319~91322,91324~91331,91333~91335,91337,91340~91346,91350~91365,91367,91371~91372,91376~91377,91380~91388,91390,91392~91396,91399,91401~91413,91416,91423,91426,91436,91470,91482,91495~91497,91499,91501~91508,91510,91521~91523,91526,91601~91612,91614~91618,91701~91702,91706,91708~91711,91714~91716,91722~91724,91729~91735,91737,91739~91741,91743~91750,91752,91754~91756,91758~91759,91761~91773,91775~91776,91778,91780,91784~91786,91788~91793,91795,91797~91799,91801~91804,91841,91896,91899,91901~91903,91905~91906,91908~91917,91921,91931~91935,91941~91948,91950~91951,91962~91963,91976~91980,91987,91990,92003~92004,92007~92011,92013~92014,92018~92030,92033,92036~92040,92046,92049,92051~92052,92054~92061,92064~92072,92074~92075,92078~92079,92081~92086,92088,92090~92093,92096,92101~92124,92126~92140,92142~92143,92145,92147,92149~92150,92152~92155,92158~92179,92182,92184,92186~92187,92190~92199,92201~92203,92210~92211,92220,92222~92223,92225~92227,92230~92236,92239~92244,92247~92264,92266~92268,92270,92273~92278,92280~92286,92292,92301,92304~92305,92307~92318,92320~92327,92329,92331~92342,92344~92347,92350,92352,92354,92356~92359,92363~92366,92368~92369,92371~92378,92382,92385~92386,92391~92395,92397~92399,92401~92408,92410~92415,92418,92423~92424,92427,92501~92509,92513~92519,92521~92522,92530~92532,92536,92539,92543~92546,92548~92549,92551~92557,92561~92564,92567,92570~92572,92581~92587,92589~92593,92595~92596,92599,92602~92607,92609~92610,92612,92614~92620,92623~92630,92637,92646~92663,92672~92679,92683~92685,92688,92690~92694,92697~92698,92701~92712,92725,92728,92735,92780~92782,92799,92801~92809,92811~92812,92814~92817,92821~92823,92825,92831~92838,92840~92846,92850,92856~92857,92859~92871,92877~92883,92885~92887,92899,93001~93007,93009~93016,93020~93024,93030~93036,93040~93044,93060~93067,93093~93094,93099,93101~93103,93105~93111,93116~93118,93120~93121,93130,93140,93150,93160,93190,93199,93203,93205~93206,93215~93216,93220,93222,93224~93226,93238,93240~93241,93243,93249~93252,93254~93255,93263,93268,93276,93280,93283,93285,93287,93301~93309,93311~93314,93380~93390,93401~93403,93405~93410,93412,93420~93424,93427~93430,93432~93438,93440~93449,93451~93458,93460~93461,93463~93465,93475,93483,93501~93502,93504~93505,93510,93516,93518~93519,93523~93524,93527~93528,93531~93532,93534~93536,93539,93543~93544,93550~93556,93558,93560~93563,93581,93584,93586,93590~93592,93596,93599') && opIn(t.state, new Set<String> { 'ca', 'california' }))))      return 'a300g000002PgD7AAK'; //Patch TSR HR & Southwest - & GEO Based
    if(opIn(t.state, new Set<String> { 'dc', 'dist of columbia', 'district of columbia', 'md', 'maryland', 'va', 'virginia', 'nc', 'north carolina', 'sc', 'south carolina' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDAAA0'; //Patch TSR Mid-Atlantic - & GEO Based
    if(((opIn(t.state, new Set<String> { 'ia', 'iowa', 'il', 'illinois', 'in', 'indiana', 'mn', 'minnesota', 'mo', 'missouri', 'ne', 'nebraska', 'wi', 'wisconsin' }) && opIn(t.custom1, new Set<String> { 'general business', 'terr sales', 'territory sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' })) || (opIn(t.custom1, new Set<String> { 'general business', 'terr sales', 'territory sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '92328,92384,92389,93201~93202,93204,93207~93208,93210,93212,93218~93219,93221,93223,93227,93230,93232,93234~93235,93237,93239,93242,93244~93247,93256~93258,93260~93262,93265~93267,93270~93272,93274~93275,93277~93279,93282,93286,93290~93292,93513~93515,93522,93526,93530,93542,93545,93549,93601~93616,93618~93628,93630~93631,93633~93654,93656~93657,93660~93662,93664~93670,93673,93675,93701~93712,93714~93718,93720~93730,93740~93741,93744~93745,93747,93750,93755,93760~93761,93764~93765,93771~93780,93784,93786,93790~93794,93844,93888,94013,94020~94028,94035,94039~94043,94060,94074,94085~94089,94096,94098,94301~94306,94309,95001~95003,95005~95011,95013~95015,95017~95021,95023~95024,95026,95030~95033,95035~95038,95041~95046,95050~95056,95060~95067,95070~95071,95073,95075~95077,95101,95103,95106,95108~95113,95115~95136,95138~95141,95148,95150~95161,95164,95170,95172~95173,95190~95194,95196,95301,95303,95306~95307,95311~95313,95315~95319,95322~95326,95328~95329,95333~95334,95338,95340~95341,95343~95345,95348,95350~95358,95360~95361,95363,95365,95367~95369,95374,95380~95382,95386~95389,95397'))))      return 'a300g000002PgDCAA0'; //Patch TSR NC & Silicon Valley - & GEO Based
    if(opIn(t.state, new Set<String> { 'ct', 'connecticut', 'ma', 'massachusetts', 'me', 'maine', 'nh', 'new hampshire', 'ri', 'rhode island', 'vt', 'vermont' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDEAA0'; //Patch TSR New England - & GEO Based
    if(opIn(t.state, new Set<String> { 'pa', 'pennsylvania' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opZipcode(t.zipCode, '15108,15201~15244,15250~15255,15257~15265,15267~15268,15270,15272,15274~15279,15281~15283,15285~15286,15289~15290,15295'))      return 'a300g000002PgESAA0'; //Patch GB US Ohio Valley - Pittsburgh (Clone)
    if(((opIn(t.state, new Set<String> { 'ak', 'alaska', 'hi', 'hawaii', 'id', 'idaho', 'or', 'oregon', 'wa', 'washington' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' })) || (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }) && opIn(t.state, new Set<String> { 'ca', 'california' }) && opZipcode(t.zipCode, '93426,93450,93512,93517,93529,93541,93546,93901~93902,93905~93908,93912,93915,93920~93928,93930,93932~93933,93940,93942~93944,93950,93953~93955,93960,93962,94002,94005,94010~94011,94014~94019,94030,94037~94038,94044,94061~94066,94070,94080,94083,94101~94112,94114~94147,94150~94172,94175,94177,94188,94199,94203~94209,94211,94229~94230,94232,94234~94237,94239~94240,94244~94250,94252,94254,94256~94259,94261~94263,94267~94269,94271,94273~94274,94277~94280,94282~94291,94293~94299,94401~94404,94497,94501~94503,94506~94531,94533~94553,94555~94583,94585~94592,94595~94599,94601~94615,94617~94625,94649,94659~94662,94666,94701~94710,94712,94720,94801~94808,94820,94850,94901,94903~94904,94912~94915,94920,94922~94931,94933,94937~94942,94945~94957,94960,94963~94966,94970~94979,94998~94999,95004,95012,95039,95201~95213,95215,95219~95234,95236~95237,95240~95242,95245~95255,95257~95258,95267,95269,95296~95297,95304~95305,95309~95310,95314,95320~95321,95327,95330,95335~95337,95346~95347,95364,95366,95370,95372~95373,95375~95379,95383,95385,95391,95401~95410,95412,95415~95433,95435~95437,95439,95441~95446,95448~95454,95456~95473,95476,95480~95482,95485~95488,95490,95492~95494,95497,95501~95503,95511,95514,95518~95519,95521,95524~95528,95531~95532,95534,95536~95538,95540,95542~95543,95545~95556,95558~95560,95562~95565,95567~95571,95573,95585,95587,95589,95595,95601~95621,95623~95642,95644~95646,95648,95650~95656,95658~95699,95701,95703,95709,95712~95715,95717,95720~95722,95724,95726,95728,95735~95736,95741~95742,95746~95747,95757~95759,95762~95763,95765,95776,95798~95799,95811~95838,95840~95843,95851~95853,95860,95864~95867,95887,95894,95899,95901,95903,95910,95912~95920,95922~95930,95932,95934~95951,95953~95963,95965~95984,95986~95988,95991~95993,96001~96003,96006~96011,96013~96017,96019~96025,96027~96029,96031~96035,96037~96041,96044,96046~96052,96054~96059,96061~96065,96067~96071,96073~96076,96078~96080,96084~96097,96099,96101,96103~96130,96132~96137,96140~96143,96145~96146,96148,96150~96152,96154~96158,96160~96162'))))      return 'a300g000002PgDIAA0'; //Patch TSR NW & Bay Area - & GEO Based
    if(opIn(t.state, new Set<String> { 'ky', 'kentucky', 'mi', 'michigan', 'oh', 'ohio', 'wv', 'west virginia' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a300g000002PgENAA0'; //Patch TSR Ohio Valley - GEO Based
    if(opIn(t.state, new Set<String> { 'ar', 'arkansas', 'ks', 'kansas', 'la', 'louisiana', 'ok', 'oklahoma', 'tx', 'texas' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDMAA0'; //Patch TSR Southcentral - GEO Based
    if(opIn(t.state, new Set<String> { 'al', 'alabama', 'fl', 'florida', 'ga', 'georgia', 'ms', 'mississippi', 'tn', 'tennessee' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDOAA0'; //Patch TSR Southeast - & GEO Based
    if(opIn(t.country, new Set<String> { 'no', 'nor', 'norway', 'dk', 'dnk', 'denmark', 'is', 'isl', 'iceland', 'fi', 'fin', 'finland', 'se', 'swe', 'sweden', 'greenland', 'faroe islands', 'aland islands', 'åland islands' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgAnAAK'; //Patch TSR Nordics 1 - GEO Based
    if(opIn(t.country, new Set<String> { 'be', 'bel', 'belgium', 'nl', 'nld', 'netherlands', 'the netherlands', 'holland', 'north holland', 'lu', 'lux', 'luxembourg', 'luxemburg' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgAsAAK'; //Patch TSR Benelux 1 - GEO Based
    if(opIn(t.country, new Set<String> { 'mt', 'malta', 'mc', 'mco', 'monaco', 'gf', 'guf', 'french guiana', 'pf', 'pyf', 'french polynesia', 'samoa', 'tf', 'atf', 'french southern territories', 'senegal', 'sn', 'dza', 'algeria', 'morocco', 'tunisia', 're', 'reu', 'reunion', 'fr', 'fra', 'france' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDPAA0'; //Patch TSR FR 1 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }) && opIn(t.country, new Set<String> { 'at', 'aut', 'austria', 'österreich', 'osterreich', 'ch', 'che', 'switzerland', 'schweiz' }))      return 'a300g000002PgDUAA0'; //Patch TSR Alpine 1 - GEO Based
    if(opIn(t.country, new Set<String> { 'it', 'ita', 'italy', 'italia', 'gr', 'grc', 'greece', 'cy', 'cyp', 'cyprus', 'republic of san marino', 'san marino', 'sm' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDZAA0'; //Patch TSR Italy 1 - GEO Based
    if(opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }) && opIn(t.country, new Set<String> { 'pt', 'prt', 'portugal', 'es', 'esp', 'spain', 'gibraltar', 'gibraltor' }))      return 'a300g000002PgDeAAK'; //Patch TSR Iberia 1 - GEO Based
    if(opIn(t.country, new Set<String> { 'au', 'aus', 'australia', 'new caledonia', 'new caledonia (french)', 'nc', 'ncl', 'micronesia', 'papua new guinea', 'vanuatu', 'vanautu', 'tuvalu', 'solomon islands', 'kiribati', 'nz', 'nzl', 'new zealand', 'fiji', 'fiji islands', 'fji', 'fji. fji', 'cook islands', 'cok' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgE8AAK'; //Patch TSR ANZ - Geo Based
    if(opIn(t.country, new Set<String> { 'in', 'ind', 'india' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDyAAK'; //Patch TSR India - Geo Based
    if(opIn(t.country, new Set<String> { 'cambodia', 'khm', 'mm', 'mmr', 'myanmar', 'burma', 'brunei darussalam', 'brunei', 'mongolia', 'vietnam', 'vn', 'viet nam', 'id', 'idn', 'indonesia', 'my', 'mys', 'malaysia', 'ph', 'phl', 'philippines', 'sg', 'sgp', 'singapore', 'th', 'tha', 'thailand', 'east timor' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDtAAK'; //Patch TSR ASEAN - Geo Based
    if(opIn(t.state, new Set<String> { 'ny', 'new york', 'de', 'delaware', 'nj', 'n.j.', 'new jersey', 'pa', 'pennsylvania' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002PgDGAA0'; //Patch TSR Northeast - & GEO Based
    if(opIn(t.country, new Set<String> { 'jp', 'jpn', 'japan' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a3070000000TSGBAA4'; //Patch TSR North Asia - GEO Based
    if(opIn(t.state, new Set<String> { 'nj', 'pa', 'de', 'new jersey', 'philadelphia', 'delaware' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'ent', 'enterprise' }))      return 'a300g0000019xVRAAY'; //Patch Catch All ENT Northeast - States
    if(opIn(t.country, new Set<String> { 'ca', 'canada' }) && opIn(t.custom1, new Set<String> { 'terr sales', 'territory sales' }))      return 'a300g000002RZOSAA4'; //Patch TSR Canada - GEO Patch
    if(opIn(t.country, new Set<String> { 'in', 'ind', 'india' }) && opEqual(t.custom1, 'Enterprise'))      return 'a3070000000TSFdAAO'; //Patch INDIA - ENT
    return null;
  }
  private Id matchGroup6(PatchDataModel.MatchTarget t)
  {
    if((opIn(t.state, new Set<String> { 'az', 'arizona', 'nv', 'nevada' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSOoAAO'; //Patch GB US South West - All States
    if((opZipcode(t.zipCode, '90001~90084,90086~90089,90091,90093~90096,90099,90101~90103,90189,90201~90202,90209~90213,90220~90224,90230~90233,90239~90242,90245,90247~90251,90254~90255,90260~90267,90270,90272,90274~90275,90277~90278,90280,90290~90296,90301~90313,90397~90398,90401~90411,90501~90510,90601~90610,90612,90620~90624,90630~90633,90637~90640,90650~90652,90659~90662,90670~90671,90680,90701~90704,90706~90707,90710~90717,90720~90721,90723,90731~90734,90740,90742~90749,90755,90801~90810,90813~90815,90822,90831~90835,90840,90842,90844~90848,90853,90888,90895,90899,91001,91003,91006~91007,91009~91012,91016~91017,91020~91021,91023~91025,91030~91031,91040~91043,91046,91066,91077,91101~91110,91114~91118,91121,91123~91126,91129,91131,91182,91184~91185,91188~91189,91191,91199,91201~91210,91214,91221~91222,91224~91226,91301~91311,91313,91316,91319~91322,91324~91331,91333~91335,91337,91340~91346,91350~91365,91367,91371~91372,91376~91377,91380~91388,91390,91392~91396,91399,91401~91413,91416,91423,91426,91436,91470,91482,91495~91497,91499,91501~91508,91510,91521~91523,91526,91601~91612,91614~91618,91701~91702,91706,91708~91711,91714~91716,91722~91724,91729~91735,91737,91739~91741,91743~91750,91752,91754~91756,91758~91759,91761~91773,91775~91776,91778,91780,91784~91786,91788~91793,91795,91797~91799,91801~91804,91841,91896,91899,91901~91903,91905~91906,91908~91917,91921,91931~91935,91941~91948,91950~91951,91962~91963,91976~91980,91987,91990,92003~92004,92007~92011,92013~92014,92018~92030,92033,92036~92040,92046,92049,92051~92052,92054~92061,92064~92072,92074~92075,92078~92079,92081~92086,92088,92090~92093,92096,92101~92124,92126~92140,92142~92143,92145,92147,92149~92150,92152~92155,92158~92179,92182,92184,92186~92187,92190~92199,92201~92203,92210~92211,92220,92222~92223,92225~92227,92230~92236,92239~92244,92247~92264,92266~92268,92270,92273~92278,92280~92286,92292,92301,92304~92305,92307~92318,92320~92327,92329,92331~92342,92344~92347,92350,92352,92354,92356~92359,92363~92366,92368~92369,92371~92378,92382,92385~92386,92391~92395,92397~92399,92401~92408,92410~92415,92418,92423~92424,92427,92501~92509,92513~92519,92521~92522,92530~92532,92536,92539,92543~92546,92548~92549,92551~92557,92561~92564,92567,92570~92572,92581~92587,92589~92593,92595~92596,92599,92602~92607,92609~92610,92612,92614~92620,92623~92630,92637,92646~92663,92672~92679,92683~92685,92688,92690~92694,92697~92698,92701~92712,92725,92728,92735,92780~92782,92799,92801~92809,92811~92812,92814~92817,92821~92823,92825,92831~92838,92840~92846,92850,92856~92857,92859~92871,92877~92883,92885~92887,92899,93001~93007,93009~93016,93020~93024,93030~93036,93040~93044,93060~93067,93093~93094,93099,93101~93103,93105~93111,93116~93118,93120~93121,93130,93140,93150,93160,93190,93199,93203,93205~93206,93215~93216,93220,93222,93224~93226,93238,93240~93241,93243,93249~93252,93254~93255,93263,93268,93276,93280,93283,93285,93287,93301~93309,93311~93314,93380~93390,93401~93403,93405~93410,93412,93420~93424,93427~93430,93432~93438,93440~93449,93451~93458,93460~93461,93463~93465,93475,93483,93501~93502,93504~93505,93510,93516,93518~93519,93523~93524,93527~93528,93531~93532,93534~93536,93539,93543~93544,93550~93556,93558,93560~93563,93581,93584,93586,93590~93592,93596,93599') && opIn(t.state, new Set<String> { 'ca', 'california' })) && (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })))      return 'a3070000000TSP4AAO'; //Patch GB US South West - So. Cal Zip Codes
    if((opIn(t.state, new Set<String> { 'ga', 'georgia', 'tn', 'tennessee', 'ms', 'mississippi' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSQiAAO'; //Patch GB US South East - All States
    if((opInRange(t.zipCode, '32003', '34997') || opIn(t.state, new Set<String> { 'fl', 'florida' })) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSPYAA4'; //Patch GB US South East - Florida
    if((opInRange(t.zipCode, '35004', '36925') || opIn(t.state, new Set<String> { 'al', 'alabama' })) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSOgAAO'; //Patch GB US South East - Alabama
    if((opIn(t.state, new Set<String> { 'ar', 'arkansas', 'ks', 'kansas', 'la', 'louisiana', 'ok', 'oklahoma', 'tx', 'texas' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSOkAAO'; //Patch GB US South Central - All States
    if((opIn(t.state, new Set<String> { 'mi', 'michigan', 'oh', 'ohio', 'ky', 'kentucky', 'wv', 'west virginia' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSQLAA4'; //Patch GB US Ohio Valley - States
    if(opIn(t.state, new Set<String> { 'pa', 'pennsylvania' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opZipcode(t.zipCode, '15108,15201~15244,15250~15255,15257~15265,15267~15268,15270,15272,15274~15279,15281~15283,15285~15286,15289~15290,15295'))      return 'a300g0000007wsSAAQ'; //Patch GB US Ohio Valley - Pittsburgh
    if((opIn(t.state, new Set<String> { 'hawaii', 'hi', 'alaska', 'ak' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000EhYsAAK'; //Patch GB US Bay Area - HI & AK
    if((opZipcode(t.zipCode, '92328,92384,92389,93201~93202,93204,93207~93208,93210,93212,93218~93219,93221,93223,93227,93230,93232,93234~93235,93237,93239,93242,93244~93247,93256~93258,93260~93262,93265~93267,93270~93272,93274~93275,93277~93279,93282,93286,93290~93292,93426,93450,93512~93515,93517,93522,93526,93529~93530,93541~93542,93545~93546,93549,93601~93616,93618~93628,93630~93631,93633~93654,93656~93657,93660~93662,93664~93670,93673,93675,93701~93712,93714~93718,93720~93730,93740~93741,93744~93745,93747,93750,93755,93760~93761,93764~93765,93771~93780,93784,93786,93790~93794,93844,93888,93901~93902,93905~93908,93912,93915,93920~93928,93930,93932~93933,93940,93942~93944,93950,93953~93955,93960,93962,94002,94005,94010~94011,94013~94028,94030,94035,94037~94044,94060~94066,94070,94074,94080,94083,94085~94089,94096,94098,94101~94112,94114~94147,94150~94172,94175,94177,94188,94199,94203~94209,94211,94229~94230,94232,94234~94237,94239~94240,94244~94250,94252,94254,94256~94259,94261~94263,94267~94269,94271,94273~94274,94277~94280,94282~94291,94293~94299,94301~94306,94309,94401~94404,94497,94501~94503,94506~94531,94533~94553,94555~94583,94585~94592,94595~94599,94601~94615,94617~94625,94649,94659~94662,94666,94701~94710,94712,94720,94801~94808,94820,94850,94901,94903~94904,94912~94915,94920,94922~94931,94933,94937~94942,94945~94957,94960,94963~94966,94970~94979,94998~94999,95001~95015,95017~95021,95023~95024,95026,95030~95033,95035~95039,95041~95046,95050~95056,95060~95067,95070~95071,95073,95075~95077,95101,95103,95106,95108~95113,95115~95136,95138~95141,95148,95150~95161,95164,95170,95172~95173,95190~95194,95196,95201~95213,95215,95219~95234,95236~95237,95240~95242,95245~95255,95257~95258,95267,95269,95296~95297,95301,95303~95307,95309~95330,95333~95338,95340~95341,95343~95348,95350~95358,95360~95361,95363~95370,95372~95383,95385~95389,95391,95397,95401~95410,95412,95415~95433,95435~95437,95439,95441~95446,95448~95454,95456~95473,95476,95480~95482,95485~95488,95490,95492~95494,95497,95501~95503,95511,95514,95518~95519,95521,95524~95528,95531~95532,95534,95536~95538,95540,95542~95543,95545~95556,95558~95560,95562~95565,95567~95571,95573,95585,95587,95589,95595,95601~95621,95623~95642,95644~95646,95648,95650~95656,95658~95699,95701,95703,95709,95712~95715,95717,95720~95722,95724,95726,95728,95735~95736,95741~95742,95746~95747,95757~95759,95762~95763,95765,95776,95798~95799,95811~95838,95840~95843,95851~95853,95860,95864~95867,95887,95894,95899,95901,95903,95910,95912~95920,95922~95930,95932,95934~95951,95953~95963,95965~95984,95986~95988,95991~95993,96001~96003,96006~96011,96013~96017,96019~96025,96027~96029,96031~96035,96037~96041,96044,96046~96052,96054~96059,96061~96065,96067~96071,96073~96076,96078~96080,96084~96097,96099,96101,96103~96130,96132~96137,96140~96143,96145~96146,96148,96150~96152,96154~96158,96160~96162') && opIn(t.state, new Set<String> { 'ca', 'california' })) && (opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })))      return 'a3070000000TSP0AAO'; //Patch GB US Bay Area - NorCal Zip Codes
    if(opIn(t.state, new Set<String> { 'wa', 'washington' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSSNAA4'; //Patch GB US Pacific Northwest - Washington
    if(opIn(t.state, new Set<String> { 'or', 'oregon' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSRbAAO'; //Patch GB US Pacific Northwest - Oregon
    if(opIn(t.state, new Set<String> { 'id', 'idaho' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSPoAAO'; //Patch GB US Pacific Northwest- Idaho
    if(opIn(t.state, new Set<String> { 'co', 'colorado' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSPGAA4'; //Patch GB US Heartland Rockies - Colorado
    if(opIn(t.state, new Set<String> { 'ut', 'utah' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSSBAA4'; //Patch GB US Heartland Rockies - Utah
    if(opIn(t.state, new Set<String> { 'ny', 'new york', 'de', 'delaware', 'nj', 'n.j.', 'new jersey', 'pa', 'pennsylvania' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }))      return 'a3070000000TSRLAA4'; //Patch GB US North East - States
    if((opIn(t.state, new Set<String> { 'il', 'illinois', 'in', 'indiana', 'ne', 'nebraska', 'mo', 'missouri' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSPkAAO'; //Patch GB US Northcentral - States
    if(opIn(t.state, new Set<String> { 'ia', 'iowa' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSR6AAO'; //Patch GB US Heartland Rockies - IA, Iowa
    if(opIn(t.state, new Set<String> { 'nd', 'north dakota' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united stated of america' }))      return 'a3070000000TSQmAAO'; //Patch GB US Heartland Rockies - North Dakota
    if(opIn(t.state, new Set<String> { 'sd', 'south dakota' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united stated of america' }))      return 'a3070000000TSRzAAO'; //Patch GB US Heartland Rockies - South Dakota
    if(opIn(t.state, new Set<String> { 'wi', 'wisconsin' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united stated of america' }))      return 'a3070000000TSSRAA4'; //Patch GB US Heartland Rockies - Wisconsin
    if(opIn(t.state, new Set<String> { 'mn', 'minnesota' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united stated of america' }))      return 'a3070000000TSQSAA4'; //Patch GB US Heartland Rockies - Minnesota
    if(opIn(t.state, new Set<String> { 'mt', 'montana' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSQeAAO'; //Patch GB US North West - Montana
    if(opIn(t.state, new Set<String> { 'wy', 'wyoming', 'nm', 'new mexico' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' }) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSSZAA4'; //Patch GB US North West - Wyoming & New Mexico
    if((opIn(t.state, new Set<String> { 'ct', 'connecticut', 'ma', 'massachusetts', 'me', 'maine', 'nh', 'new hampshire', 'ri', 'rhode island', 'vt', 'vermont' }) && opIn(t.custom1, new Set<String> { 'general business', 'corp sales', 'corporate sales' })) && opIn(t.country, new Set<String> { 'us', 'usa', 'u.s.', 'u.s.a', 'united states', 'united states of america' }))      return 'a3070000000TSQCAA4'; //Patch GB US New England - All States
    return null;
  }
  //returns the matched patch
  global PatchDataModel.PatchInfo match(PatchDataModel.MatchTarget t)
  {
    Id result = null;
    prematches = prematchList(t);
    result = matchGroup1(t);
    if(result != null) return processResult(result);
    result = matchGroup2(t);
    if(result != null) return processResult(result);
    result = matchGroup3(t);
    if(result != null) return processResult(result);
    result = matchGroup4(t);
    if(result != null) return processResult(result);
    result = matchGroup5(t);
    if(result != null) return processResult(result);
    result = matchGroup6(t);
    if(result != null) return processResult(result);
    return null;
  }
}